from Crypto.Util.number import getPrime

# Given n, the product of two 1024-bit primes p and q
n = 17430021011099389090653651359627911503070221253003639166822832511489231520980246689407093576327549019597235039503043070978200708691742734974838671866434912810233139660571082218963239412982291294771120842810514037445127302666727141350597402191049739865754682186419921695051446845052318325095489396606655646246110469169119164573749601800559299072278560173683919412694881122699262824962579345052682706119617054068588018147498812978347858252672390844956888474433231647157764542996958541999661075091684712881189443542054303900451065495091961556947324116508145650643328329050731905756724868620892652126605107256946343405077


# To find p and q, you can iterate over potential prime candidates and check if they divide n.
# Since we are dealing with 1024-bit primes, we'll generate random 1024-bit numbers as candidates.
while True:
    candidate_p = getPrime(1024)
    print(candidate_p)
    if n % candidate_p == 0:
        # If candidate_p divides n, then it is likely one of the primes.
        p = candidate_p
        break

# To find q, you can simply calculate q as n divided by p.
q = n // p

print("p:", p)
print("q:", q)

#130708465859224660685501878508849208355839334906550136019043440501975568054697951373000909804797218919493607839549878947877843908402900124981444026546690218621047614205781425011228138598661855587602080516459602644241703823907334123322356177055052818126075210435698441648655938915155900734208778272962764969481 133350360258009846919063014834168584313512231817998939379939885460741797811819341415352420734113145525671416472110974960795987910611995841169217492333950482732526119870149234415994391553076939727769505761236002753399172749056932709315651923300705205556643365503672013446998959606916645292669475262964934111917
