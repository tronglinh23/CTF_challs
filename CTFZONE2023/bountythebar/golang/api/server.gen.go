// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get findings summary
	// (GET /discovery)
	GetDiscovery(w http.ResponseWriter, r *http.Request)
	// List of program user joined
	// (GET /program/joined)
	GetProgramJoined(w http.ResponseWriter, r *http.Request)
	// Join to BB program
	// (POST /program/{p_uuid}/join)
	PostProgramPUuidJoin(w http.ResponseWriter, r *http.Request, pUuid openapi_types.UUID)
	// List of all programs
	// (GET /programs)
	GetPrograms(w http.ResponseWriter, r *http.Request)
	// Submit report
	// (POST /report)
	PostReport(w http.ResponseWriter, r *http.Request)
	// Get report
	// (GET /report/{r_uuid})
	GetReportRUuid(w http.ResponseWriter, r *http.Request, rUuid openapi_types.UUID, params GetReportRUuidParams)
	// Import current user's reputation from HackerOne
	// (POST /user/import_reputation)
	PostUserImportReputation(w http.ResponseWriter, r *http.Request)
	// Check authenticated api
	// (GET /user/info)
	GetUserInfo(w http.ResponseWriter, r *http.Request)
	// Login using username and password
	// (POST /user/login)
	PostUserLogin(w http.ResponseWriter, r *http.Request)
	// Register using username and password
	// (POST /user/register)
	PostUserRegister(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDiscovery operation middleware
func (siw *ServerInterfaceWrapper) GetDiscovery(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDiscovery(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProgramJoined operation middleware
func (siw *ServerInterfaceWrapper) GetProgramJoined(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProgramJoined(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProgramPUuidJoin operation middleware
func (siw *ServerInterfaceWrapper) PostProgramPUuidJoin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "p_uuid" -------------
	var pUuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "p_uuid", runtime.ParamLocationPath, chi.URLParam(r, "p_uuid"), &pUuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "p_uuid", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProgramPUuidJoin(w, r, pUuid)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPrograms operation middleware
func (siw *ServerInterfaceWrapper) GetPrograms(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPrograms(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostReport operation middleware
func (siw *ServerInterfaceWrapper) PostReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostReport(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetReportRUuid operation middleware
func (siw *ServerInterfaceWrapper) GetReportRUuid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "r_uuid" -------------
	var rUuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "r_uuid", runtime.ParamLocationPath, chi.URLParam(r, "r_uuid"), &rUuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "r_uuid", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReportRUuidParams

	// ------------- Required query parameter "pow" -------------

	if paramValue := r.URL.Query().Get("pow"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pow"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pow", r.URL.Query(), &params.Pow)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pow", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReportRUuid(w, r, rUuid, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUserImportReputation operation middleware
func (siw *ServerInterfaceWrapper) PostUserImportReputation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserImportReputation(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUserLogin operation middleware
func (siw *ServerInterfaceWrapper) PostUserLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserLogin(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostUserRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserRegister(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/discovery", wrapper.GetDiscovery)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/program/joined", wrapper.GetProgramJoined)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/program/{p_uuid}/join", wrapper.PostProgramPUuidJoin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/programs", wrapper.GetPrograms)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/report", wrapper.PostReport)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/report/{r_uuid}", wrapper.GetReportRUuid)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/import_reputation", wrapper.PostUserImportReputation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/info", wrapper.GetUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/login", wrapper.PostUserLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/register", wrapper.PostUserRegister)
	})

	return r
}
