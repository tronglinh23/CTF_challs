import requests
import re
import json
import numpy as np
from scipy.fft import *
from scipy.io import wavfile
import os
import aubio

# solve 1
def solve1():
  url = "https://simon1.web.2023.sunshinectf.games/"
  r = requests.Session()
  req1 = r.get(url + "frequencies", verify=False)
  store = []
  for file in req1.json()['frequencies']:
    file = re.search(r"static/(.*).wav", file).group(1)
    store.append(file)
  data = json.dumps(store)
  print(data)
  res = r.post(url + "flag", data=data, headers={"Content-Type":"application/json"}, verify=False)
  print(res.text)

# solve 3
# ref: https://stackoverflow.com/questions/54612204/trying-to-get-the-frequencies-of-a-wav-file-in-python
def get_freqs(filename):
  sr, data = wavfile.read(filename)
  if data.ndim > 1:
    data = data[:, 0]
  else:
    pass
  N = len(data)
  yf = rfft(data)
  xf = rfftfreq(N, 1 / sr)

  # Uncomment these to see the frequency spectrum as a plot
  # plt.plot(xf, np.abs(yf))
  # plt.show()

  # Get the most dominant frequency and return it
  idx = np.argmax(np.abs(yf))
  freq = xf[idx]
  return freq
def solve3():
  url = "https://simon3.web.2023.sunshinectf.games/"
  r = requests.Session()
  req1 = r.get(url + "frequencies", verify=False)
  store = []
  for file in req1.json()['frequencies']:
    getFile = r.get(url + file, verify=False)
    file = file.replace("/static/", "")
    with open(os.path.join("./static",file), 'bw+') as f:
      f.write(getFile.content)
    freq = get_freqs(os.path.join("./static",file))
    store.append(freq)
  store = list(map(int, store))
    
  data = json.dumps(store)
  print(data)
  res = r.post(url + "flag", data=data, headers={"Content-Type":"application/json"}, verify=False)
  print(res.text)

# solve 2
# using aubio to extract pitch
def extract_pitch(filename):
  sample_rate, data = wavfile.read(filename)

  # create pitch object
  p = aubio.pitch("yin", samplerate = sample_rate)
  # other examples:
  # = aubio.pitch("yinfft", 4096, 512, 44100)
  # = aubio.pitch("yin", 2048, 512, 44100)
  # = aubio.pitch("mcomb", 4096, 512, 44100)
  # = aubio.pitch("schmitt", samplerate = 44100, hop_size = 512, buf_size = 2048)

  # pad end of input vector with zeros
  pad_length = p.hop_size - data.shape[0] % p.hop_size
  x_padded = np.pad(data, (0, pad_length), 'constant', constant_values=0)
  # to reshape it in blocks of hop_size
  x_padded = x_padded.reshape(-1, p.hop_size)

  # input array should be of type aubio.float_type (defaults to float32)
  x_padded = x_padded.astype(aubio.float_type)

  candidates = []
  for frame, i in zip(x_padded, range(len(x_padded))):
      pitch_candidate = p(frame)[0]
      candidates.append(pitch_candidate)
  
  # test with pro1 always the first element of list was error => so remove this
  candidates = candidates[1:]
  return sum(candidates) / len(candidates)

def solve2():
  url = "https://simon2.web.2023.sunshinectf.games/"
  r = requests.Session()
  req1 = r.get(url + "frequencies", verify=False)
  store = []
  for file in req1.json()['frequencies']:
    getFile = r.get(url + file, verify=False)
    file = file.replace("/static/", "")
    with open(os.path.join("./static",file), 'bw+') as f:
      f.write(getFile.content)
    freq = extract_pitch(os.path.join("./static",file))
    store.append(round(freq))
  store = list(map(int, store))
    
  data = json.dumps(store)
  print(data)
  res = r.post(url + "flag", data=data, headers={"Content-Type":"application/json"}, verify=False)
  print(res.text)
  
if __name__ == "__main__":
  solve1()
  solve2()
  solve3()
  
  

# sun{simon_says_wait_that_was_a_mistake_what_do_you_mean_the_filenames_were_frequencies}